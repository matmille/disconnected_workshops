---
- name: Build Setup
  user: root
  hosts: all

  vars:
  - guests:
    - name: build
      url: /var/lib/libvirt/ISOs/rhel-server-7.3-x86_64-dvd.iso
      cpu: 1
      mem: 4096
      virt_type: kvm
      virt_hypervisor: hvm
      os:
        type: linux
        variant: rhel7
      disk:
        size: 36
        path: /var/lib/libvirt/images
  - kickstart_directory: /var/www/html/ks
  - kickstart_file_configuration: ks.cfg
  - kickstart_file_configuration_template: "templates/hypervisor/{{ kickstart_file_configuration }}.j2"
  - kvm_private_network_name: private
  - kvm_private_network_ip: 192.168.120.1
  - kvm_private_network_netmask: 255.255.255.0
  - kvm_private_network_dhcp_start: 192.168.120.120
  - kvm_private_network_dhcp_end: 192.168.120.254
  - password_root: $6$rhel6usgcb$aS6oPGXcPKp3OtFArSrhRwu6sN8q2.yEGY7AIwDOQd23YCtiz9c5mXbid1BzX9bmXTEZi.hCzTEXFosVBI5ng0
  - password_admin: $6$rhel6usgcb$aS6oPGXcPKp3OtFArSrhRwu6sN8q2.yEGY7AIwDOQd23YCtiz9c5mXbid1BzX9bmXTEZi.hCzTEXFosVBI5ng0
  - password_grub2: $6$rhel6usgcb$aS6oPGXcPKp3OtFArSrhRwu6sN8q2.yEGY7AIwDOQd23YCtiz9c5mXbid1BzX9bmXTEZi.hCzTEXFosVBI5ng0
  - samba_file_configuration: smb.conf
  - samba_file_configuration_template: "templates/hypervisor/{{ samba_file_configuration }}.j2"
  - www_file_configuration_ks: ks.conf
  - www_file_configuration_ks_template: "templates/hypervisor/{{ www_file_configuration_ks }}.j2"
  - www_port: 8000
  - git_projects: /var/lib/git
  - share_directory: /shared

  tasks:
  - name: Install prerequisite RPM packages on hypervisor host
    yum:
      name: "{{ item }}"
      state: present
    with_items:
      - git
      - gitweb
      - git-daemon
      - httpd
      - libselinux-python
      - libvirt-client
      - libvirt-daemon
      - libvirt-daemon-driver-qemu
      - libvirt-python
      - policycoreutils-python
      - python-lxml
      - qemu-img
      - qemu-kvm
      - qemu-kvm-common
      - qemu-kvm-tools
      - samba
      - virt-install
      - virt-manager
    tags:
      - hypervisor_setup

  - name: Enable Port for HTTP communication in SELinux
    seport:
      ports: "{{ www_port }}"
      proto: tcp
      setype: http_port_t
      state: present
    ignore_errors: yes
    tags:
      - hypervisor_setup

  - name: Stage Apache HTTPD kickstart configuration file
    template:
      src: "{{ www_file_configuration_ks_template }}"
      dest: "/etc/httpd/conf.d/{{ www_file_configuration_ks }}"
      owner: root
      group: root
      mode: 0644
    tags:
      - hypervisor_setup

  - name: Create kickstart configuration file directory available via web service
    file:
      path: "{{ kickstart_directory }}"
      state: directory
      owner: apache
      group: apache
      mode: 0775
    tags:
      - hypervisor_setup

  - name: Stage kickstart configuration file for guest network configuration installations
    template:
      src: "{{ kickstart_file_configuration_template }}"
      dest: "{{ kickstart_directory }}/{{ kickstart_file_configuration }}"
      owner: apache
      group: apache
      mode: "a=r"

  - name: Set SELinux context of kickstart file
    sefcontext:
      target: "{{ kickstart_directory }}/{{ kickstart_file_configuration }}"
      setype: httpd_sys_content_t
      state: present
    ignore_errors: yes

  - name: Run restore context to reload SELinux
    shell: "restorecon -Rv {{ kickstart_directory }}"

  - name: Create share directory to export deliverables to end-user
    file:
      path: "{{ share_directory }}"
      state: directory
      owner: nobody
      group: nobody
      mode: 0775
    tags:
      - hypervisor_setup

  - name: Create git projects directory
    file:
      path: "{{ git_projects }}"
      state: directory
      owner: nobody
      group: nobody
      mode: 0775
    tags:
      - hypervisor_setup

  - name: Start Kernel Virtual Machine (KVM) service (libvirtd)
    service:
      name: libvirtd
      state: started
      enabled: yes
    register: kvm
    tags:
      - hypervisor_setup

  - name: Wait for libvirtd to start
    pause:
      seconds: 120
    when: kvm.changed
    tags:
      - hypervisor_setup

  - name: Query Kernel Virtual Machine to get a list of private networks
    virt_net:
      command: list_nets
    register: kvm_networks
    tags:
      - hypervisor_setup

  - name: List existing Kernel Virtual Machine networks
    debug:
      msg: "{{ kvm_networks.list_nets }}"
    tags:
      - hypervisor_setup

  - name: Create private network
    virt_net:
      command: define
      name: "{{ kvm_private_network_name }}"
      xml: '{{ lookup("template", "templates/hypervisor/private-net.xml.j2") }}'
      autostart: yes
      state: present
    when: kvm_private_network_name not in kvm_networks.list_nets
    tags:
      - hypervisor_setup

  - name: Start private network
    virt_net:
      command: start
      name: private
    when: kvm_private_network_name not in kvm_networks.list_nets
    tags:
      - hypervisor_setup

  - name: Start GIT daemon
    service:
      name: git-daemon
      state: started
      enabled: yes
    tags:
      - hypervisor_setup

  - name: re-Start GIT daemon (to ensure latest configuration is loaded)
    service:
      name: git-daemon
      state: restarted
      enabled: yes
    tags:
      - hypervisor_setup

  - name: Start Apache HTTPD - Web Service (required for kickstart for network configuration)
    service:
      name: httpd
      state: started
      enabled: yes
    tags:
      - hypervisor_setup

  - name: re-Start Apache HTTPD (to ensure latest configuration is loaded)
    service:
      name: httpd
      state: restarted
      enabled: yes
    tags:
      - hypervisor_setup

  - name: Open firewall port for Apache HTTPD
    firewalld:
      port: "{{ www_port }}/tcp"
      permanent: true
      state: enabled
    tags:
      - hypervisor_setup

  - name: Stage Samba configuration file
    template:
      src: "{{ samba_file_configuration_template }}"
      dest: "/etc/samba/{{ samba_file_configuration }}"
      owner: root
      group: root
      mode: 0644
    tags:
      - hypervisor_setup

  - name: Start Samba to provide SMB/CIFS networking service
    service:
      name: smb
      state: started
      enabled: yes
    tags:
      - hypervisor_setup

  - name: re-Start Samba (to ensure latest configuration is loaded)
    service:
      name: smb
      state: restarted
      enabled: yes
    tags:
      - hypervisor_setup

  - name: Open firewall port(s) for Samba
    firewalld:
      service: samba
      permanent: true
      state: enabled
    tags:
      - hypervisor_setup

  - name: Reload firewalld
    service:
      name: firewalld
      state: reloaded
      enabled: yes
    tags:
      - hypervisor_setup

  - name: Set SELinux context of shared directory
    sefcontext:
      target: "{{ share_directory }}(/.*)?"
      setype: samba_share_t
      state: present
    ignore_errors: yes
    tags:
      - hypervisor_setup

  - name: Run restore context to reload SELinux
    shell: "restorecon -Rv {{ share_directory }}"
    tags:
      - hypervisor_setup

  - name: Get list of Virtual Machines available on the host
    virt:
      command: list_vms
    register: vms

  - name: Display Virtual Machine list (debugging purposes)
    debug:
      msg: "{{ item }}"
    with_items:
      - "{{ vms.list_vms }}"

  - name: Create Virtual Machine
    shell: virt-install -n "{{ item.name }}"
           -r "{{ item.mem }}"
           --location "{{ item.url }}"
           --vcpus "{{ item.cpu }}"
           --os-type "{{ item.os.type }}"
           --os-variant "{{ item.os.variant }}"
           --network=network:"{{ kvm_private_network_name}}",model=e1000
           --graphics spice
           --"{{ item.virt_hypervisor }}"
           --virt-type "{{ item.virt_type }}"
           --disk size="{{ item.disk.size }}",path="{{ item.disk.path }}/{{ item.name }}".qcow2,format=qcow2
           --disk path="{{ item.url }}",device=cdrom
           --extra-args="ks=http://{{ kvm_private_network_ip }}:{{ www_port }}/{{ kickstart_file_configuration}} ip=dhcp"
           --check path_in_use=off
    when: item.name not in vms.list_vms
    with_items:
      - "{{ guests }}"

  - name: Allow time for newly created Virtual Machine to boot
    pause:
      minutes: 1

  - name: Query KVM for environment/VM details
    virt:
      command: info
    register: virt_info

  - name: Ensure all created Virtual Machines are running
    virt:
      name: "{{ item.name }}"
      command: start
    when: virt_info[item.name]['state'] != 'running'
    with_items:
      - "{{ guests }}"

  - name: Wait for all Virtual Machines to enter running state
    virt:
      command: info
    register: virt_info
    until: virt_info[item.name]['state'] == 'running'
    retries: 1500
    delay: 10
    with_items:
      - "{{ guests }}"

  - name: Display each Virtual Machine and its IP address
    debug:
      msg: "{{ item }}"
    with_items:
      - "{{ vms.list_vms }}"

  - name: Query Hypervisor
    virt:
      command: info
    register: virt_info
    tags:
      - vm_clean

  - name: Display output of Hypervisor query
    debug:
      msg: "{{ virt_info }}"
    tags:
      - vm_clean
