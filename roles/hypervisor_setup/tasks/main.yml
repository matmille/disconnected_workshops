---

- name: Install prerequisite RPM packages
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - git
    - gitweb
    - git-daemon
    - httpd
    - libselinux-python
    - libvirt-client
    - libvirt-daemon
    - libvirt-daemon-driver-qemu
    - libvirt-python
    - lorax
    - nfs-utils
    - policycoreutils-python
    - python-lxml
    - qemu-img
    - qemu-kvm
    - qemu-kvm-common
    - qemu-kvm-tools
    - rpcbind
    - samba
    - virt-install
    - virt-manager
  tags:
    - hypervisor_setup

- name: Enable Port for HTTP communication in SELinux
  seport:
    ports: "{{ www_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  ignore_errors: yes
  tags:
    - hypervisor_setup

- name: Stage Apache HTTPD kickstart configuration file
  template:
    src: "{{ www_file_configuration_ks_template }}"
    dest: "/etc/httpd/conf.d/{{ www_file_configuration_ks }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - hypervisor_setup

- name: Create kickstart configuration file directory available via web service
  file:
    path: "{{ kickstart_directory }}"
    state: directory
    owner: apache
    group: apache
    mode: 0775
  tags:
    - hypervisor_setup

- name: Stage kickstart configuration file for guest network configuration installations
  template:
    src: "{{ kickstart_file_configuration_template }}"
    dest: "{{ kickstart_directory }}/{{ kickstart_file_configuration }}"
    owner: apache
    group: apache
    mode: "a=r"

- name: Set SELinux context of kickstart file
  sefcontext:
    target: "{{ kickstart_directory }}/{{ kickstart_file_configuration }}"
    setype: httpd_sys_content_t
    state: present
  ignore_errors: yes

- name: Run restore context to reload SELinux
  shell: "restorecon -Rv {{ kickstart_directory }}"

- name: Create share directory to export deliverables to end-user
  file:
    path: "{{ share_directory }}"
    state: directory
    owner: nobody
    group: nobody
    mode: 0775
  tags:
    - hypervisor_setup

- name: Create Ansible Tower Bundle directory
  file:
    path: "{{ share_directory }}/ansible"
    state: directory
    owner: nobody
    group: nobody
    mode: 0775
  tags:
    - hypervisor_setup

- name: Ensure Ansible Tower is staged
  stat:
    path: "{{ share_directory }}/{{ ansible_tower_bundle_file }}"
  register: ansible_tower_download

- name: Download Ansible Tower Bundle
  get_url:
    url: "{{ ansible_tower_bundle_base_url }}/{{ ansible_tower_bundle_file }}"
    dest: "{{ share_directory }}/{{ ansible_tower_bundle_file }}"
  when: ansible_tower_download.stat.exists == False

- name: UnTar Ansible Tower Bundle
  unarchive:
    remote_src: yes
    src: "{{ share_directory }}/{{ ansible_tower_bundle_file }}"
    dest: "{{ share_directory }}/ansible"
    extra_opts: "--strip-components=1"

- name: Start GIT daemon
  service:
    name: git.socket
    state: started
    enabled: yes
  tags:
    cd - hypervisor_setup

- name: re-Start GIT daemon (to ensure latest configuration is loaded)
  service:
    name: git.socket
    state: restarted
    enabled: yes
  tags:
    - hypervisor_setup

- name: Open firewall port(s) for GIT tcp
  firewalld:
    port: "9148/tcp"
    permanent: true
    state: enabled
  tags:
    - hypervisor_setup

- name: Open firewall port(s) for GIT udp
  firewalld:
    port: "9148/udp"
    permanent: true
    state: enabled
  tags:
    - hypervisor_setup

- name: Open firewall port(s) for GIT Web
  firewalld:
    port: "{{ git_port }}/tcp"
    permanent: true
    state: enabled
  tags:
    - hypervisor_setup

- name: Update /etc/shells for git-shell
  lineinfile:
    path: /etc/shells
    line: "/bin/git-shell"
  tags:
    - hypervisor_setup

- name: Create GIT user
  user:
    name: git
    password: "{{ password_git }}"
    home: "{{ git_projects }}"
    shell: "/bin/git-shell"
    generate_ssh_key: yes
    update_password: always
  tags:
    - hypervisor_setup

- name: Stat authorized_keys
  stat:
    path: "{{ git_projects }}/authorized_keys"
  register: stat_authorized_keys
  tags:
    - hypervisor_setup

- name: Allow GIT access
  copy:
    remote_src: True
    src: "{{ git_projects }}/.ssh/id_rsa.pub"
    dest: "{{ git_projects }}/.ssh/authorized_keys"
    owner: git
    group: git
  when: stat_authorized_keys.stat.exists == False
  tags:
   - hypervisor_setup

- name: Start Apache HTTPD - Web Service (required for kickstart for network configuration)
  service:
    name: httpd
    state: started
    enabled: yes
  tags:
   - hypervisor_setup

- name: re-Start Apache HTTPD (to ensure latest configuration is loaded)
  service:
    name: httpd
    state: restarted
    enabled: yes
  tags:
    - hypervisor_setup

- name: Open firewall port for Apache HTTPD
  firewalld:
    port: "{{ www_port }}/tcp"
    permanent: true
    state: enabled
  tags:
    - hypervisor_setup

- name: Stage NFS configuration
  template:
    src: "{{ exports_file_configuration_template }}"
    dest: "/etc/{{ exports_file_configuration }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - hypervisor_setup

- name: Start NFS service
  service:
    name: nfs
    state: started
    enabled: yes
  tags:
    - hypervisor_setup

- name: re-Start NFS service (ensure latest configuraiton is loaded)
  service:
    name: nfs
    state: restarted
    enabled: yes
  tags:
    - hypervisor_setup

- name: Open firewall port for NFS
  firewalld:
    service: "{{ item }}"
    permanent: true
    state: enabled
  with_items:
    - nfs
    - mountd
    - rpc-bind
  tags:
    - hypervisor_setup

- name: Stage Samba configuration file
  template:
    src: "{{ samba_file_configuration_template }}"
    dest: "/etc/samba/{{ samba_file_configuration }}"
    owner: root
    group: root
    mode: 0644
  tags:
    - hypervisor_setup

- name: Start Samba to provide SMB/CIFS networking service
  service:
    name: smb
    state: started
    enabled: yes
  tags:
    - hypervisor_setup

- name: re-Start Samba (to ensure latest configuration is loaded)
  service:
    name: smb
    state: restarted
    enabled: yes
  tags:
    - hypervisor_setup

- name: Open firewall port(s) for Samba
  firewalld:
    service: samba
    permanent: true
    state: enabled
  tags:
    - hypervisor_setup

- name: Reload firewalld
  service:
    name: firewalld
    state: reloaded
    enabled: yes
  tags:
    - hypervisor_setup

- name: Set SELinux context of shared directory
  sefcontext:
    target: "{{ share_directory }}(/.*)?"
    setype: samba_share_t
    state: present
  ignore_errors: yes
  tags:
    - hypervisor_setup

- name: Run restore context to reload SELinux
  shell: "restorecon -Rv {{ share_directory }}"
  tags:
    - hypervisor_setup
