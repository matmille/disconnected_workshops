---

#####
# KVM

- name: Start Kernel Virtual Machine (KVM) service (libvirtd)
  service:
    name: libvirtd
    state: started
    enabled: yes
  register: kvm
  tags:
    - hypervisor_setup

- name: Wait for libvirtd to start
  pause:
    seconds: 120
  when: kvm.changed
  tags:
    - hypervisor_setup

- name: Query Kernel Virtual Machine to get a list of private networks
  virt_net:
    command: list_nets
  register: kvm_networks
  tags:
    - hypervisor_setup

- name: List existing Kernel Virtual Machine networks
  debug:
    msg: "{{ kvm_networks.list_nets }}"
  tags:
    - hypervisor_setup

- name: Create private network
  virt_net:
    command: define
    name: "{{ kvm_private_network_name }}"
    xml: '{{ lookup("template", "templates/hypervisor/private-net.xml.j2") }}'
    autostart: yes
    state: present
  when: kvm_private_network_name not in kvm_networks.list_nets
  tags:
    - hypervisor_setup

- name: Start private network
  virt_net:
    command: start
    name: private
  when: kvm_private_network_name not in kvm_networks.list_nets
  tags:
    - hypervisor_setup

- name: Get list of Virtual Machines available on the host
  virt:
    command: list_vms
  register: vms

- name: Display Virtual Machine list (debugging purposes)
  debug:
    msg: "{{ item }}"
  with_items:
    - "{{ vms.list_vms }}"
  tags:
    - hypervisor_setup

- name: Create RHEL ISO for VM Installation
  shell: dd if=/dev/cdrom of=/var/lib/libvirt/images/rhel7.iso
  args:
    creates: /var/lib/libvirt/images/rhel7.iso
  tags:
    - hypervisor_setup

- name: Create Virtual Machine
  shell: virt-install -n "{{ item.name }}"
         -r "{{ item.mem }}"
         --location "{{ item.url }}"
         --vcpus "{{ item.cpu }}"
         --os-type "{{ item.os.type }}"
         --os-variant "{{ item.os.variant }}"
         --network=network:"{{ kvm_private_network_name}}",model=e1000
         --graphics spice
         --"{{ item.virt_hypervisor }}"
         --virt-type "{{ item.virt_type }}"
         --disk size="{{ item.disk.size }}",path="{{ item.disk.path }}/{{ item.name }}".qcow2,format=qcow2
         --disk path="{{ item.url }}",device=cdrom
         --extra-args="ks=http://{{ kvm_private_network_ip }}:{{ www_port }}/ks.cfg-{{ item.ks }} ip=dhcp"
         --check path_in_use=off
  when: item.name not in vms.list_vms
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Allow time for newly created Virtual Machine to boot
  pause:
    minutes: 1
  tags:
    - hypervisor_setup

- name: Query KVM for environment/VM details
  virt:
    command: info
  register: virt_info
  tags:
    - hypervisor_setup

- name: Ensure all created Virtual Machines are running
  virt:
    name: "{{ item.name }}"
    command: start
  when: virt_info[item.name]['state'] != 'running'
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for all Virtual Machines to enter running state
  virt:
    command: info
  register: virt_info
  until: virt_info[item.name]['state'] == 'running'
  retries: 1500
  delay: 10
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Display each Virtual Machine and its IP address
  debug:
    msg: "{{ item }}"
  with_items:
    - "{{ vms.list_vms }}"
  tags:
    - hypervisor_setup

- name: Query Hypervisor
  virt:
    command: info
  register: virt_info
  tags:
    - hypervisor_setup

- name: Display output of Hypervisor query
  debug:
    msg: "{{ virt_info }}"
  tags:
    - hypervisor_setup

- name: Ensure all Virtual Machines are stopped
  virt:
    name: "{{ item.name }}"
    command: shutdown
  when:
    - virt_info[item.name] is defined
    - virt_info[item.name]['state'] != "shutdown"
  with_items:
    - "{{ guests }}"
  register: vm_shutdown
  tags:
    - hypervisor_setup

- name: Wait for Virtual Machines to cleanly shutdown
  pause:
    minutes: 1
  when: vm_shutdown.changed
  tags:
    - hypervisor_setup

- name: Ensure all Virtal Machines are down (else force)
  virt:
    name: "{{ item.name }}"
    command: destroy
  ignore_errors: yes
  when:
    - virt_info[item.name] is defined
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for all Virtual Machines to be shutdown and/or are offline
  virt:
    command: info
  register: virt_info
  until: virt_info[item.name]['state'] != 'destroyed' or virt_info[item.name]['state'] != "shutdown"
  when:
    - virt_info[item.name] is defined
  retries: 1500
  delay: 10
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create directory for all guestmount(s)
  file:
    path: /guests
    state: directory
    mode: 0755
  tags:
    - hypervisor_setup

- name: Create directory for guestmount FUSE filesystems
  file:
    path: /guests/{{ item.name }}
    state: directory
    mode: 0755
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Mount root filesystem for all guests to the hypervisor
  shell: guestmount -m /dev/VolGroup/LogVol06:/:defaults -d {{ item.name }} /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set hostname of each of the systems
  copy:
    dest: /guests/{{ item.name }}/etc/hostname
    content: "{{ item.name }}.default"
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: un-Mount root filesystem for all guests to the hypervisor
  shell: guestunmount /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Mount home filesystem for all guests to the hypervisor
  shell: guestmount -m /dev/VolGroup/LogVol02:/:defaults -d {{ item.name }} /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: un-Mount home filesystem for all guests to the hypervisor
  shell: guestunmount /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Mount var filesystem for all guests to the hypervisor
  shell: guestmount -m /dev/VolGroup/LogVol03:/:defaults -d {{ item.name }} /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: un-Mount var filesystem for all guests to the hypervisor
  shell: guestunmount /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Query KVM for environment/VM details
  virt:
    command: info
  register: virt_info
  tags:
    - hypervisor_setup

- name: Ensure all created Virtual Machines are running
  virt:
    name: "{{ item.name }}"
    command: start
  when: virt_info[item.name]['state'] != 'running'
  with_items:
      - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for all Virtual Machines to enter running state
  virt:
    command: info
  register: virt_info
  until: virt_info[item.name]['state'] == 'running'
  retries: 1500
  delay: 10
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup
