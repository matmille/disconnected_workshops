---

#####
# KVM

- name: Update dnsmasq update
  lineinfile:
    dest: /etc/dnsmasq.conf
    line: "no-hosts"
    state: present
  tags:
    - hypervisor_setup

- name: Remove guest IPs from /etc/host if they already exist
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ item.name }}.default$"
    state: absent
  with_items:
    - "{{ guests }}"
  tags:
     - hypervisor_setup

- name: Reload dnsmasq if it is already running
  shell: /usr/bin/pkill -HUP dnsmasq
  tags:
    - hypervisor_setup

- name: Start Kernel Virtual Machine (KVM) service (libvirtd)
  service:
    name: libvirtd
    state: started
    enabled: yes
  register: kvm
  tags:
    - hypervisor_setup

- name: Wait for libvirtd to start
  pause:
    seconds: 120
  when: kvm.changed
  tags:
    - hypervisor_setup

- name: Query Kernel Virtual Machine to get a list of private networks
  virt_net:
    command: list_nets
  register: kvm_networks
  tags:
    - hypervisor_setup

- name: List existing Kernel Virtual Machine networks
  debug:
    msg: "{{ kvm_networks.list_nets }}"
  tags:
    - hypervisor_setup

- name: Create private network
  virt_net:
    command: define
    name: "{{ kvm_private_network_name }}"
    xml: '{{ lookup("template", "templates/hypervisor/private-net.xml.j2") }}'
    autostart: yes
    state: present
  when: kvm_private_network_name not in kvm_networks.list_nets
  tags:
    - hypervisor_setup

- name: Start private network
  virt_net:
    command: start
    name: private
  when: kvm_private_network_name not in kvm_networks.list_nets
  tags:
    - hypervisor_setup

- name: Get list of Virtual Machines available on the host
  virt:
    command: list_vms
  register: vms

- name: Display Virtual Machine list (debugging purposes)
  debug:
    msg: "{{ item }}"
  with_items:
    - "{{ vms.list_vms }}"
  tags:
    - hypervisor_setup

- name: Create RHEL ISO for VM Installation
  shell: dd if=/dev/cdrom of=/var/lib/libvirt/images/rhel7.iso
  args:
    creates: /var/lib/libvirt/images/rhel7.iso
  tags:
    - hypervisor_setup

- name: Create Virtual Machine
  shell: virt-install -n "{{ item.name }}"
         -r "{{ item.mem }}"
         --location "{{ item.url }}"
         --vcpus "{{ item.cpu }}"
         --os-type "{{ item.os.type }}"
         --os-variant "{{ item.os.variant }}"
         --network=network:"{{ kvm_private_network_name}}",model=e1000
         --graphics spice
         --"{{ item.virt_hypervisor }}"
         --virt-type "{{ item.virt_type }}"
         --disk size="{{ item.disk.size }}",path="{{ item.disk.path }}/{{ item.name }}".qcow2,format=qcow2
         --disk path="{{ item.url }}",device=cdrom
         --extra-args="ks=http://{{ kvm_private_network_ip }}:{{ www_port_ks }}/ks.cfg-{{ item.ks }} ip=dhcp"
         --check path_in_use=off
  when: item.name not in vms.list_vms
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Allow time for newly created Virtual Machine to boot
  pause:
    minutes: 1
  tags:
    - hypervisor_setup

- name: Query KVM for environment/VM details
  virt:
    command: info
  register: virt_info
  tags:
    - hypervisor_setup

- name: Ensure all created Virtual Machines are running
  virt:
    name: "{{ item.name }}"
    command: start
  when: virt_info[item.name]['state'] != 'running'
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for all Virtual Machines to enter running state
  virt:
    command: info
  register: virt_info
  until: virt_info[item.name]['state'] == 'running'
  retries: 1500
  delay: 10
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Display each Virtual Machine and its IP address
  debug:
    msg: "{{ item }}"
  with_items:
    - "{{ vms.list_vms }}"
  tags:
    - hypervisor_setup

- name: Query Hypervisor
  virt:
    command: info
  register: virt_info
  tags:
    - hypervisor_setup

- name: Display output of Hypervisor query
  debug:
    msg: "{{ virt_info }}"
  tags:
    - hypervisor_setup

- name: Ensure all Virtual Machines are stopped
  virt:
    name: "{{ item.name }}"
    command: shutdown
  when:
    - virt_info[item.name] is defined
    - virt_info[item.name]['state'] != "shutdown"
  with_items:
    - "{{ guests }}"
  register: vm_shutdown
  tags:
    - hypervisor_setup

- name: Wait for Virtual Machines to cleanly shutdown
  pause:
    minutes: 1
  when: vm_shutdown.changed
  tags:
    - hypervisor_setup

- name: Ensure all Virtal Machines are down (else force)
  virt:
    name: "{{ item.name }}"
    command: destroy
  ignore_errors: yes
  when:
    - virt_info[item.name] is defined
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for all Virtual Machines to be shutdown and/or are offline
  virt:
    command: info
  register: virt_info
  until: virt_info[item.name]['state'] != 'destroyed' or virt_info[item.name]['state'] != "shutdown"
  when:
    - virt_info[item.name] is defined
  retries: 1500
  delay: 10
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create directory for all guestmount(s)
  file:
    path: /guests
    state: directory
    mode: 0755
  tags:
    - hypervisor_setup

- name: Create directory for guestmount FUSE filesystems
  file:
    path: /guests/{{ item.name }}
    state: directory
    mode: 0755
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Mount root filesystem for all guests to the hypervisor
  shell: guestmount -m /dev/VolGroup/LogVol06:/:defaults -d {{ item.name }} /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set hostname of each of the systems
  copy:
    dest: /guests/{{ item.name }}/etc/hostname
    content: "{{ item.name }}.default"
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: All sudo of admin user on all guests
  copy:
    dest: /guests/{{ item.name }}/etc/sudoers.d/admin
    content: "admin ALL=(ALL) NOPASSWD:ALL"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set hostname of each of the systems
  copy:
    dest: /guests/{{ item.name }}/etc/yum.repos.d/RPMs.repo
    content: "[RPMs]\nname=RPMS\ngpgcheck=1\nenabled=1\nbaseurl=http://{{ kvm_private_network_ip }}:{{ www_port_RPMs }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create directory for guest SSH host keys (hypervisor)
  file:
    path: /guests/.ssh-host-keys
    state: directory
    mode: 0700
  tags:
    - hypervisor_setup

- name: Copy SSH host keys to hypervisor (format known_hosts)
  copy:
    content: "{{ item.name }} {{ lookup('file', \"/guests/{{ item.name }}/etc/ssh/ssh_host_ecdsa_key.pub\") }}"
    dest: /guests/.ssh-host-keys/{{ item.name }}.ssh_host_ecdsa.pub
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: guestmount does not support SELinux chcon - Forcing with .autorelabel
  copy:
    dest: /guests/{{ item.name }}/.autorelabel
    content: ""
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: un-Mount root filesystem for all guests to the hypervisor
  shell: guestunmount /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Mount home filesystem for all guests to the hypervisor
  shell: guestmount -m /dev/VolGroup/LogVol02:/:defaults -d {{ item.name }} /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create ansible.cfg for admin
  copy:
    dest: "/guests/{{ item.name }}/admin/ansible.cfg"
    content: "[defaults]\nconnection = smart\ntimeout = 60\nforks = 10\ninventory = /home/admin/hosts\n"
    owner: admin
    group: admin
    mode: 0644
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create .vimrc on guest for admin
  copy:
    src: "{{ share_directory }}/workshop-files/.vimrc"
    dest: "/guests/{{ item.name }}/admin/.vimrc"
    owner: admin
    group: admin
    mode: 0644
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create directory for guest SSH keys (on guest)
  file:
    path: /guests/{{ item.name }}/admin/.ssh
    state: directory
    owner: admin
    group: admin
    setype: ssh_home_t
    mode: 0700
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Generate SSH keys for admin user
  shell: ssh-keygen -t ecdsa -f /guests/{{ item.name }}/admin/.ssh/id_ecdsa -q -N "" -C {{ item.name }}
  args:
    creates: /guests/{{ item.name }}/admin/.ssh/id_ecdsa
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set ownership on SSH keys (private key)
  file:
    path: /guests/{{ item.name }}/admin/.ssh/id_ecdsa
    owner: admin
    group: admin
    setype: ssh_home_t
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set ownership on SSH keys (public key)
  file:
    path: /guests/{{ item.name }}/admin/.ssh/id_ecdsa.pub
    owner: admin
    group: admin
    setype: ssh_home_t
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Copy SSH public keys to hypervisor
  copy:
    src: /guests/{{ item.name }}/admin/.ssh/id_ecdsa.pub
    dest: /guests/.ssh/{{ item.name }}.id_ecdsa.pub
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create authorized_keys file for each guest
  assemble:
    src: /guests/.ssh
    dest: /guests/{{ item.name }}/admin/.ssh/authorized_keys
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set ownership on SSH keys (authorized_keys)
  file:
    path: /guests/{{ item.name }}/admin/.ssh/authorized_keys
    owner: admin
    group: admin
    setype: ssh_home_t
    mode: 0644
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Create known_hosts file for each guest
  assemble:
    src: /guests/.ssh-host-keys
    dest: /guests/{{ item.name }}/admin/.ssh/known_hosts
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Set ownership on SSH keys (known_hosts)
  file:
    path: /guests/{{ item.name }}/admin/.ssh/known_hosts
    owner: admin
    group: admin
    setype: ssh_home_t
    mode: 0644
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Run restore context to reload SELinux
  shell: "restorecon -Rv /guests/{{ item.name }}/admin/.ssh"
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: un-Mount home filesystem for all guests to the hypervisor
  shell: guestunmount /guests/{{ item.name }}
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Query KVM for environment/VM details
  virt:
    command: info
  register: virt_info
  tags:
    - hypervisor_setup

- name: Ensure all created Virtual Machines are running
  virt:
    name: "{{ item.name }}"
    command: start
  when: virt_info[item.name]['state'] != 'running'
  with_items:
      - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for all Virtual Machines to enter running state
  virt:
    command: info
  register: virt_info
  until: virt_info[item.name]['state'] == 'running'
  retries: 1500
  delay: 10
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Wait for systems to boot
  pause:
    minutes: 2

- name: Setup forwards (Display ports to link)
  debug:
    msg: "{{ item.0.name }} {{ item.1.label }} {{ item.1.internal }} {{ item.1.external }}"
  with_subelements:
    - "{{ guests }}"
    - ports
  tags:
    - hypervisor_setup

- name: Open firewall port(s) for guests (socat)
  firewalld:
    port: "{{ item.1.external }}/tcp"
    permanent: true
    state: enabled
  with_subelements:
    - "{{ guests }}"
    - ports
  tags:
    - hypervisor_setup

- name: If forward exist already - stop
  service:
    name: "rh-workshop-{{ item.0.name }}-{{ item.1.internal }}-{{ item.1.external }}-socat.service"
    state: stopped
    enabled: no
  ignore_errors: yes
  with_subelements:
    - "{{ guests }}"
    - ports
  tags:
    - hypervisor_setup

- name: Resolve Guest IP addresses
  command: "dig @{{ kvm_private_network_ip }} +short {{ item.name }}.default"
  register: resolved_IPs
  with_items:
    - "{{ guests }}"
  tags:
    - hypervisor_setup

- name: Setup forwards to internal guests via socat
  copy:
    dest: "/etc/systemd/system/rh-workshop-{{ item.0.name }}-{{ item.1.internal }}-{{ item.1.external }}-socat.service"
    content: "[Service]\nExecStart=/usr/bin/socat TCP4-LISTEN:{{ item.1.external }},fork TCP4:{{ item.0.name }}.default:{{ item.1.internal }}\n"
  with_subelements:
    - "{{ guests }}"
    - ports
  tags:
    - hypervisor_setup

- name: Update /etc/hosts with Guest IPs
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ item.item.name }}.default$"
    line: "{{ item.stdout }} {{ item.item.name }}.default"
    state: present
  with_items:
    - "{{ resolved_IPs.results }}"
  tags:
    - hypervisor_setup

- name: Start socat services
  service:
    name: "rh-workshop-{{ item.0.name }}-{{ item.1.internal }}-{{ item.1.external }}-socat.service"
    state: started
    enabled: yes
  ignore_errors: yes
  with_subelements:
    - "{{ guests }}"
    - ports
  tags:
    - hypervisor_setup
